Batting%>%
select(playerID,yearID,teamID,HR)%>%
filter(SO>=60,HR>=40)
colnames(Batting)
Batting%>%
select(playerID,yearID,teamID,HR)%>%
filter(SO>=60 &HR>=40)
Batting%>%
select(playerID,yearID,teamID,HR)%>%
filter(HR>=40 & SO<=60)
Batting%>%
select(playerID,yearID,teamID,HR,SO)%>%
filter(HR>=40 & SO<=60)
Batting%>%
select(playerID,yearID,teamID,HR,SO)%>%
filter(HR>=40 & SO<60)
Batting%>%
select(playerID,yearID,teamID,HR,SO)%>%
filter(HR>40 & SO<60)
Batting%>%
select(playerID,yearID,teamID,HR,SO)%>%
filter(teamID=="PHI",yearID==1970)
Batting%>%
select(playerID,yearID,teamID,HR,SO)%>%
filter(teamID=="PHI",HR>30,yearID==1970)
Batting%>%
select(playerID,yearID,teamID,HR,SO)%>%
filter(teamID=="PHI",HR>30,yearID<=1970)
Batting%>%
select(playerID,yearID,teamID,HR,SO)%>%
filter(teamID=="PHI",HR>30,yearID<=1979 , yearID>=1970)
Batting%>%
select(playerID,yearID,teamID,HR)%>%
filter(HR>=50)%>%
arrange(desc(HR))
Batting%>%
select(playerID,yearID,teamID,HR,SO,AB)%>%
filter(SO<=50)%>%
arrange(desc(HR))
Batting%>%
select(playerID,yearID,teamID,HR,SO,AB)%>%
filter(SO<=50,AB>=400)
Batting%>%
select(playerID,yearID,teamID,HR,SO,AB)%>%
filter(SO<=50,AB>=400)
arrange(SO)
Batting%>%
select(playerID,yearID,teamID,SO,AB)%>%
filter(SO<=50,AB>=400)
arrange(SO)
Batting%>%
select(playerID,yearID,teamID,SO,AB)%>%
filter(SO<=50,AB>=400)
arrange(SO)
Batting%>%
select(playerID,yearID,teamID,SO,AB)%>%
filter(SO<=50,AB>=400)%>%
arrange(SO)
Batting%>%
select(playerID,yearID,teamID,SO,AB)%>%
filter(SO<=10,AB>=400)%>%
arrange(SO)
Batting%>%
select(playerID,yearID,teamID,SO,AB)%>%
filter(SO<10,AB>=400)%>%
arrange(SO)
function(add){
x+5
}
3
id(1)
Howells <- read.csv('http://math.mercyhurst.edu/~sousley/STAT_139/data/Howells.csv', as.is = T);
attach(Howells);
# this time get ALL predictors
HBNMF <- Howells[which(Pop == 'NORSE' | Pop == 'BERG'),];
# many columns are Nas
H4A <- na.omit(HBNMF[,c(5:61,63,67:80)])
H4A$PopSex <- as.factor(H4A$PopSex)
head(H4A)
H4A$PopSex
table(H4A$PopSex)
library(MASS);
library(caret)
library(MASS)
library(caret)
H4A.all <- lda(H4A[2:72],H4A$PopSex, data = H4a, prior = c(0.25,0.25,0.25,0.25), CV = T)
confusionMatrix(H4A$PopSex, H4A.all$class)
confusionMatrix(H4A[holdout,'PopSex'], H4A.a8$class)
library(caret)
confusionMatrix(H4A[holdout,'PopSex'], H4A.a8$class)
H4A.all <- lda(H4A[2:72],H4A$PopSex, data = H4a, prior = c(0.25,0.25,0.25,0.25), CV = T)
confusionMatrix(H4A$PopSex, H4A.all$class)
sprop = 0.3
holdout <- sample(nrow(H4A), round(sprop*nrow(H4A)))
H4A.a7 <- lda(H4A[2:72], H4A$PopSex, data = H4A, prior = c(0.25,0.25,0.25,0.25), subset =
holdout, CV = T)
confusionMatrix(H4A$PopSex, H4A.all$class)
confusionMatrix(H4A$PopSex, H4A$class)
confusionMatrix(H4A$PopSex, H4A.all$class)
confusionMatrix(H4A[holdout,'PopSex'], H4A.a8$class)
Accuracies <- c(0.00)
for (i in seq(1000))
{
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable, stratified random split
## the outcome data are needed
p = .70, ## The proportion of records in the training set
list = FALSE)
training <- H4A[inTrain,]
testing <- H4A[-inTrain,]
testrecs <- as.numeric(rownames(testing)) # row(testing)[,1]
H4A.R <- lda(H4A[inTrain,c(2:72)], H4A[inTrain,"PopSex"], data = HA4, prior =
c(0.25,0.25,0.25,0.25), subset = -inTrain, CV = T)
Accuracies[i] <- confusionMatrix(H4A[as.numeric(rownames(H4A.R$posterior)),"PopSex"],
H4A.R$class)$overall["Accuracy"]
}
summary(Accuracies)
plot(density(Accuracies))
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable
## the outcome data are needed
p = .80, ## The proportion of records in the training set
list = FALSE)
training <- H4A[ inTrain,]
testing <- H4A[-inTrain,]
nrow(training)
nrow(testing)
# caret uses other methods from packages such as klaR (lda, qda)to do things;
# the other packages have more documentaion on how to run them.
improvement: proportion of improvement: 0.01 = 1 % improvement
maxvar: maximum number of predictors
direct: direction of selection, "forward", "backward", "both" (default)
method: resampling- 'cv' (default k = 10); 'LOOCV', 'boot', 'boot632'
# default: both directions
FourStep <- train(PopSex ~ ., data = training, maxvar = 10,
method = "stepLDA", improvement = 0.005,
trControl = trainControl(method = "boot632"))
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable
## the outcome data are needed
p = .80, ## The proportion of records in the training set
list = FALSE)
training <- H4A[ inTrain,]
testing <- H4A[-inTrain,]
nrow(training)
nrow(testing)
# caret uses other methods from packages such as klaR (lda, qda)to do things;
# the other packages have more documentaion on how to run them.
improvement: proportion of improvement: 0.01 = 1 % improvement
maxvar: maximum number of predictors
direct: direction of selection, "forward", "backward", "both" (default)
method: resampling- 'cv' (default k = 10); 'LOOCV', 'boot', 'boot632'
# default: both directions
FourStep <- train(PopSex ~ ., data = training, maxvar = 10,
method = "stepLDA", improvement = 0.005,
trControl = trainControl(method = "boot632"))
library(klaR)
H4A_swf <- stepclass(H4A[2:72], H4A$PopSex, "lda", improvement = 0.005, direction =
"forward", fold = 10)
plot
plot(H4A_swf)
Accuracies <- c(0.00)
#best model:
#PopSex ~ GOL + XCB + NLH + JUB + XML + FRS + FOL + BAA
for (i in seq(1000))
{
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable, stratified random split
## the outcome data are needed
p = .70, ## The proportion of records in the training set
list = FALSE)
training <- H4A[inTrain,]
testing <- H4A[-inTrain,]
testrecs <- as.numeric(rownames(testing)) # row(testing)[,1]
H4A.RB <- lda(PopSex ~ GOL + XCB + NLH + JUB + XML + FRS + FOL + BAA, data = H4A, prior =
c(0.25,0.25,0.25,0.25), subset = -inTrain, CV = T)
Accuracies[i] <- confusionMatrix(H4A[as.numeric(rownames(H4A.RB$posterior)),"PopSex"],
H4A.RB$class)$overall["Accuracy"]
}
summary(Accuracies)
# Min. 1st Qu. Me
H4A_swfq <- stepclass(H4A[2:72], H4A$PopSex, "qda", improvement = 0.005,, fold = 5, maxvars = 15)
final model : H4A$PopSex ~ GOL + XCB + OBH + XML + FOL + VRR
H4A_swfq$model
final model : H4A$PopSex ~ GOL + XCB + OBH + XML + FOL + VRR
confusionMatrix(H4A$PopSex, H4A.q$class)
confusionMatrix(H4A$PopSex, H4A.q8$class)
confusionMatrix(H4A$PopSex, H4A.all$class)
summary(Accuracies)
plot(density(Accuracies))
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv")) update(knn4, list(.k = 3))
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv")) update(knn4, list(.k = 3))
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv")) update(knn4, list(.k = 3))
PopSex
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv")) update(knn4, list(.k = 3))
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv")) update(knn4,list(.k = 3))
install.packages("asbio")
library(asbio)
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv")) update(knn4,list(.k = 3))
Accuracies <- c(0.00)
# best QDFA model:
# H4A$PopSex ~ GOL + XCB + OBH + XML + FOL + VRR
for (i in seq(20)) # only 20 befcause it takes a while
{
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable, stratified random split
## the outcome data are needed
p = .70, ## The proportion of records in the training set
list = FALSE)
training <- H4A[inTrain,]
testing <- H4A[-inTrain,]
# testrecs <- as.numeric(rownames(testing)) # row(testing)[,1]
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv"))
update(knn4, list(.k = 3))
knn4_pred <- predict(knn4,newdata = testing)
Accuracies[i] <- confusionMatrix(knn4_pred,testing$PopSex)$overall["Accuracy"]
}
summary(Accuracies)
ci.median(Accuracies, conf = 0.95)
Accuracies <- c(0.00)
# best QDFA model:
# H4A$PopSex ~ GOL + XCB + OBH + XML + FOL + VRR
for (i in seq(20)) # only 20 befcause it takes a while
{
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable, stratified random split
## the outcome data are needed
p = .80, ## The proportion of records in the training set
list = FALSE)
training <- H4A[inTrain,]
testing <- H4A[-inTrain,]
# testrecs <- as.numeric(rownames(testing)) # row(testing)[,1]
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv"))
update(knn4, list(.k = 3))
knn4_pred <- predict(knn4,newdata = testing)
Accuracies[i] <- confusionMatrix(knn4_pred,testing$PopSex)$overall["Accuracy"]
}
summary(Accuracies)
Accuracies <- c(0.00)
# best QDFA model:
# H4A$PopSex ~ GOL + XCB + OBH + XML + FOL + VRR
for (i in seq(20)) # only 20 befcause it takes a while
{
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable, stratified random split
## the outcome data are needed
p = .75## The proportion of records in the training set
list = FALSE)
training <- H4A[inTrain,]
testing <- H4A[-inTrain,]
# testrecs <- as.numeric(rownames(testing)) # row(testing)[,1]
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv"))
update(knn4, list(.k = 3))
knn4_pred <- predict(knn4,newdata = testing)
Accuracies[i] <- confusionMatrix(knn4_pred,testing$PopSex)$overall["Accuracy"]
}
summary(Accuracies)
Accuracies <- c(0.00)
# best QDFA model:
# H4A$PopSex ~ GOL + XCB + OBH + XML + FOL + VRR
for (i in seq(20)) # only 20 befcause it takes a while
{
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable, stratified random split
## the outcome data are needed
p = .90## The proportion of records in the training set
list = FALSE)
training <- H4A[inTrain,]
testing <- H4A[-inTrain,]
# testrecs <- as.numeric(rownames(testing)) # row(testing)[,1]
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv"))
update(knn4, list(.k = 3))
knn4_pred <- predict(knn4,newdata = testing)
Accuracies[i] <- confusionMatrix(knn4_pred,testing$PopSex)$overall["Accuracy"]
}
summary(Accuracies)
Accuracies <- c(0.00)
# best QDFA model:
# H4A$PopSex ~ GOL + XCB + OBH + XML + FOL + VRR
for (i in seq(20)) # only 20 befcause it takes a while
{
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable, stratified random split
## the outcome data are needed
p = .70## The proportion of records in the training set
list = FALSE)
training <- H4A[inTrain,]
testing <- H4A[-inTrain,]
# testrecs <- as.numeric(rownames(testing)) # row(testing)[,1]
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv"))
update(knn4, list(.k = 3))
knn4_pred <- predict(knn4,newdata = testing)
Accuracies[i] <- confusionMatrix(knn4_pred,testing$PopSex)$overall["Accuracy"]
}
summary(Accuracies)
Accuracies <- c(0.00)
# best QDFA model:
# H4A$PopSex ~ GOL + XCB + OBH + XML + FOL + VRR
for (i in seq(20)) # only 20 befcause it takes a while
{
inTrain <- createDataPartition(y = H4A$PopSex, # y = grouping variable, stratified random split
## the outcome data are needed
p = .90, ## The proportion of records in the training set
list = FALSE)
training <- H4A[inTrain,]
testing <- H4A[-inTrain,]
# testrecs <- as.numeric(rownames(testing)) # row(testing)[,1]
knn4 <- train(PopSex ~ ., data = training, method = "knn",
preProcess = c("center", "scale"), tuneLength = 10,
trControl = trainControl(method = "cv"))
update(knn4, list(.k = 3))
knn4_pred <- predict(knn4,newdata = testing)
Accuracies[i] <- confusionMatrix(knn4_pred,testing$PopSex)$overall["Accuracy"]
}
summary(Accuracies)
ci.median(Accuracies, conf = 0.95)
knn4
df<-Master%>%
filter(!is.na(weight))%>%
select(weight)
plot = ggplot()+
geom_histogram(data=df,aes(x=weight),color="white",fill="blue",bins=25)+
ggtitle("Baseball player weights")
library(dplyr)
library(Lahman)
library(ggplot2)
library(ggiraph)
df<-Master%>%
filter(!is.na(weight))%>%
select(weight)
plot = ggplot()+
geom_histogram(data=df,aes(x=weight),color="white",fill="blue",bins=25)+
ggtitle("Baseball player weights")
ggiraph(code = print(plot),hover_css = "fill-opacity:.3;cursor:pointer;")
df<-Teams%>%
filter(yearID==1980)%>%
select(teamID,HR)
plot<-ggplot()+
geom_bar(data = df,aes(x=reorder(teamID,HR),y=HR),stat = "identity",color="blue",fill="white")+coord_flip()
ggiraph(code = print(plot),hover_css = "fill-opacity:.3;cursor:pointer;")
df<-Teams%>%
filter(yearID==1980)%>%
select(name,HR)%>%
arrange(HR)
df$name = as.factor(df$name)
df$name
df$name = as.factor(df$name,levels=df$name)
df$name = factor(df$name,levels=df$name)
barplot(df)
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity")
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity")+coord_flip()
df<-Teams%>%
filter(yearID==1980)%>%
select(name,HR)%>%
arrange(desc(HR))
df$name = factor(df$name,levels=df$name)
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity")+coord_flip()
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity",color="red",fill="black")+coord_flip()
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity",color="black",fill="black")+coord_flip()
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity",color="black",fill="white")+coord_flip()
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity",color="white",fill="white")+coord_flip()
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity",color="white",fill="black")+coord_flip()
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity",color="white",fill="black")+coord_flip()+
ggtitle("1980 Team Homeruns")
ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity",color="white",fill="black")+coord_flip()+
ggtitle("1980 Team Homeruns")+xlab("Team Name")+ylab("Homeruns")
g<-ggplot()+
geom_bar(data=df,aes(x=name,y=HR),stat = "identity",color="white",fill="black")+coord_flip()+
ggtitle("1980 Team Homeruns")+xlab("Team Name")+ylab("Homeruns")
ggiraph(code = print(g))
g<-ggplot()+
geom_bar(data=df,aes(x=name,y=HR,tooltip=HR),stat = "identity",color="white",fill="black")+coord_flip()+
ggtitle("1980 Team Homeruns")+xlab("Team Name")+ylab("Homeruns")
g<-ggplot()+
geom_bar(data=df,aes(x=name,y=HR,tooltip=HR),stat = "identity",color="white",fill="black")+coord_flip()+
ggtitle("1980 Team Homeruns")+xlab("Team Name")+ylab("Homeruns")
ggiraph(code = print(g),hover_css = "fill-opacity:.3;cursor:pointer;")
g<-ggplot()+
geom_bar(data=df,aes(x=name,y=HR,tooltip=HR),stat = "identity",color="white",fill="black")+coord_flip()+
ggtitle("1980 Team Homeruns")+xlab("Team Name")+ylab("Homeruns")
g<-ggplot()+
geom_bar(data=df,aes(x=name,y=HR,tooltip=HR,data_id=name),stat = "identity",color="white",fill="black")+coord_flip()+
ggtitle("1980 Team Homeruns")+xlab("Team Name")+ylab("Homeruns")
g<-ggplot()+
geom_bar_interactive(data=df,aes(x=name,y=HR,tooltip=HR,data_id=name),stat = "identity",color="white",fill="black")+coord_flip()+
ggtitle("1980 Team Homeruns")+xlab("Team Name")+ylab("Homeruns")
ggiraph(code = print(g),hover_css = "fill-opacity:.3;cursor:pointer;")
df<-Batting%>%
filter(playerID=='ruthba01')%>%
select(yearID,HR)
ggplot()+
geom_line(data=df,aes(x=yearID,y=HR))
g<-ggplot()+
geom_line_interactive(data=df,aes(x=yearID,y=HR,tooltip=HR))
ggiraph(code = print(g),hover_css = "fill-opacity:.3;cursor:pointer;")
g<-ggplot()+
geom_line_interactive(data=df,aes(x=yearID,y=HR))
geom_point_interactive(data=df,aes(x=yearID,y=HR,tooltip=HR))
ggiraph(code = print(g),hover_css = "fill-opacity:.3;cursor:pointer;")
g<-ggplot()+
geom_line_interactive(data=df,aes(x=yearID,y=HR))+
geom_point_interactive(data=df,aes(x=yearID,y=HR,tooltip=HR))
ggiraph(code = print(g),hover_css = "fill-opacity:.3;cursor:pointer;
")
ggiraph(code = print(g),hover_css = "fill:white:stroke:red")
g<-ggplot()+
geom_line_interactive(data=df,aes(x=yearID,y=HR))+
geom_point_interactive(data=df,aes(x=yearID,y=HR,tooltip=HR,data_id=yearID))
ggiraph(code = print(g),hover_css = "fill:white:stroke:red")
g<-ggplot()+
geom_line(data=df,aes(x=yearID,y=HR))+
geom_point_interactive(data=df,aes(x=yearID,y=HR,tooltip=HR,data_id=yearID))
ggiraph(code = print(g),hover_css = "fill:white:stroke:red")
ggiraph(code = print(g),hover_css = "fill:white;stroke:red")
library(Lahman)
library(ggplot2)
result<-Batting%>%
filter(playerID=='ruthba01')%>%
select(SO,HR)
library(dplyr)
result<-Batting%>%
filter(playerID=='ruthba01')%>%
select(SO,HR)
ggplot()+
geom_point(data = result,aes(x=SO,y=HR))
ggplot()+
geom_point(data = result,aes(x=SO,y=HR))+
xlab("strikeouts")+
ylab("homeruns")
ggplot()+
geom_histogram(data=result,aes(x=HR))
ggplot()+
geom_histogram(data=result,aes(x=HR),bins=10)
ggplot()+
geom_histogram(data=result,aes(x=HR),bins=5)
ggplot()+
geom_histogram(data=result,aes(x=HR),bins=5,color="blue",fill="white")
ggplot()+
geom_histogram(data=result,aes(x=HR),bins=10,color="blue",fill="white")
ggplot()+
geom_point(data=result,aes(x=yearID,y=HR))
ggplot()+
geom_point(data=result,aes(x=YearID,y=HR))
ggplot()+
geom_point(data=result,aes(x=yearID,y=HR))
result<-Batting%>%
filter(playerID=='ruthba01')%>%
select(SO,HR)
ggplot()+
geom_point(data = result,aes(x=SO,y=HR))+
xlab("strikeouts")+
ylab("homeruns")
#hist-------------------------------
ggplot()+
geom_histogram(data=result,aes(x=HR),bins=10,color="blue",fill="white")
# time series
ggplot()+
geom_point(data=result,aes(x=yearID,y=HR))
colnames(result)
result<-Batting%>%
filter(playerID=='ruthba01')%>%
select(SO,HR,yearID)
ggplot()+
geom_point(data = result,aes(x=SO,y=HR))+
xlab("strikeouts")+
ylab("homeruns")
#hist-------------------------------
ggplot()+
geom_histogram(data=result,aes(x=HR),bins=10,color="blue",fill="white")
# time series
ggplot()+
geom_point(data=result,aes(x=yearID,y=HR))
ggplot()+
geom_point(data=result,aes(x=yearID,y=HR))+
geom_line(data=result),aes(x=yearID,y=HR))
ggplot()+
geom_point(data=result,aes(x=yearID,y=HR))+
geom_line(data=result,aes(x=yearID,y=HR))
library(devtools)
library(blogdown)
new_site(theme = "kakawait/hugo-tranquilpeak-theme")
setwd("C:/Users/Akki/Desktop/personal-blog")
library(devtools)
library(blogdown)
new_site(theme = "kakawait/hugo-tranquilpeak-theme")
serve_site()
serve_site()
serve_site()
serve_site()
